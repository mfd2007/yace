import Component from '../lib/component.js';
import store from '../store/index.js';
import * as proddb from '../lib/productdatabase.js';
import VulnerabilityNotesList from './vulnerabilityNotesList.js';
import TextInput from './textinput.js';

export default class List extends Component {
    
    // Pass our store instance and the HTML element up to the parent Component
    constructor(selector) {
        super({
            store,
            element: document.querySelector(selector)
        });
    }

    /**
     * React to state changes and render the component's HTML
     *
     * @returns {void}
     */
    render() {
        let self = this;

        // If there are no items to show, render a little status instead
        if(store.state.csaf.vulnerabilities == null) {
          self.element.innerHTML = `
            <ul class="w3-ul">
              <li><h2>vulnerability</h2></li>
                    <button id="add_vulnerability" class="w3-button w3-block w3-green">Add vulnerability</button>
                </li>
            </ul>
         `;
        } else {
        // Loop the items and generate a list of elements
          self.element.innerHTML = `
            <ul class="w3-ul">
              <li><h2>vulnerability</h2></li>
                ${store.state.csaf.vulnerabilities.map((vulnerabilityItem, index) => {
                    return `
                        <li class="w3-display-container">
                          <div id="input_vulnerabilities.${index}.title"></div>
                          <div id="input_vulnerabilities.${index}.cve"></div>
                          <div id="vulnerabilities.${index}.notes"></div>
                          <div>
                            <ul class="w3-ul">
                              ${store.state.csaf.product_tree.map((productItem) => {
                                return `
                                  <li class="w3-display-container">
                                    ${proddb.getProductFullName(productItem)}
                                     <select id="vulnerabilities.${index}.product_status" class="w3-select w3-border yace-products" data-vulnerabilityid="${index}" data-productid="${proddb.getProductFullId(productItem)}" required>
                                      <option value="">Choose your option</option>
                                      <option value="first_affected" ${(vulnerabilityItem?.product_status?.affected != undefined && vulnerabilityItem?.product_status?.affected.includes(proddb.getProductFullId(productItem)))?'selected':''}>affected</option>
                                      <option value="first_fixed" ${(vulnerabilityItem?.product_status?.fixed != undefined && vulnerabilityItem?.product_status?.fixed.includes(proddb.getProductFullId(productItem)))?'selected':''}>not Affected</option>
                                    </select> 
                                  </li>
                                `
                              }).join('')}
                            </ul>
                          </div>
                          <button id="remove_vulnerability" class="w3-button w3-block w3-red" aria-label="Delete this item">Remove</button>
                        </li>
                    `
                }).join('')}
                <li>
                    <button id="add_vulnerability" class="w3-button w3-block w3-green">Add vulnerability</button>
                </li>
            </ul>
          `;
          store.state.csaf.vulnerabilities.forEach((vulnerabilityItem, index) => {
            let vulTitle = new TextInput("#input_vulnerabilities\\." + index + "\\.title", "Title", "vulnerabilities." + index + ".title", true, "");
            vulTitle.render();  
            let vulCve = new TextInput("#input_vulnerabilities\\." + index + "\\.cve", "CVE", "vulnerabilities." + index + ".cve", true, "^CVE-[0-9]{4}-[0-9]{4,}$");
            vulCve.render();
            let vulNotList = new VulnerabilityNotesList("#vulnerabilities\\."+index+"\\.notes",index);
            vulNotList.render();
          })
        }
         
        // Add a submit event listener to the form and prevent it from posting back
        self.element.querySelectorAll('#add_vulnerability').forEach((button) => {
          button.addEventListener('click', () => {
            store.dispatch('addVulnerability', null);
          });
        });
        
        // Find all the buttons in the list and when they are clicked, we dispatch a 
        // `clearItem` action which we pass the current item's index to
        self.element.querySelectorAll('#remove_vulnerability').forEach((button, index) => {
            button.addEventListener('click', () => {
                store.dispatch('removeVulnerability', { index });
            });
        });
        
        self.element.querySelectorAll("select.yace-products").forEach((element) => {
            element.addEventListener('change', () => {
                store.dispatch('setProductStatus', { "path": element.id, "status" : element.value, "productId": element.dataset.productid, "vulnerabilityId": element.dataset.vulnerabilityid});
            });
        });
    }
};
