import Component from '../lib/component.js';
import TextArea from './textarea.js';
import TextInput from './textinput.js';
import ComboInput from './comboinput.js';
import store from '../store/index.js';

export default class NotesList extends Component {
    
    vulnerabilityId = "";
    
    // Pass our store instance and the HTML element up to the parent Component
    constructor(selector, vulnerabilityId) {
        super({
            store,
            element: document.querySelector(selector)
        });
        this.vulnerabilityId = vulnerabilityId;
    }

    /**
     * React to state changes and render the component's HTML
     *
     * @returns {void}
     */
    render() {
        let self = this;

        // If there are no items to show, render a little status instead
        if((store.state.csaf?.vulnerabilities == undefined) ||
           (store.state.csaf?.vulnerabilities.length < this.vulnerabilityId) ||
           (store.state.csaf?.vulnerabilities[this.vulnerabilityId].notes == undefined))
        {
          self.element.innerHTML = `
            <ul class="w3-ul">
              <li><h3>Notes</h3></li>
              <li>
                <button id="add_vul_notes" class="w3-button w3-block w3-green">Add note</button>
              </li>
            </ul>
         `;
        }else {
        // Loop the items and generate a list of elements
          self.element.innerHTML = `
            <ul class="w3-ul">
              <li><h3>Notes</h3></li>
              ${store.state.csaf?.vulnerabilities[this.vulnerabilityId].notes.map((notesItem, index) => {
                return `
                  <div class="w3-panel w3-leftbar">
                    <div class="w3-row">
                      <div class="w3-col w3-right" style="width:50px">
                        <button id="remove_notes" class="w3-button  w3-pale-red" aria-label="Delete this item">&times</button>
                      </div>
                      <div class="w3-rest w3-container">
                        <div id="vulnerabilities.${this.vulnerabilityId}.notes.${index}.title"></div>
                        <div id="vulnerabilities.${this.vulnerabilityId}.notes.${index}.text"></div>
                        <div id="vulnerabilities.${this.vulnerabilityId}.notes.${index}.category"></div>
                      </div>
                    </div>
                  </div>
                `
              }).join('')}
              <button id="add_notes" class="w3-button w3-block w3-green">Add notes</button>
            `;
            store.state.csaf?.vulnerabilities[this.vulnerabilityId].notes.forEach((notesItem, index) => {
              let noteTitle = new TextInput("#vulnerabilities\\."+this.vulnerabilityId+"\\.notes\\."+index+"\\.title", "Title", "vulnerabilities."+this.vulnerabilityId+".notes."+index+".title", true, "");
              noteTitle.render();
              let noteText = new TextArea("#vulnerabilities\\."+this.vulnerabilityId+"\\.notes\\."+index+"\\.text", "Text", "vulnerabilities."+this.vulnerabilityId+".notes."+index+ ".text", true, "");
              noteText.render();
              let noteCombo = new ComboInput(
                "#vulnerabilities\\."+this.vulnerabilityId+"\\.notes\\."+index+"\\.category", 
                "Category", 
                "vulnerabilities."+this.vulnerabilityId+".notes."+index+".category", 
                [
                  {value:"description", label:"description"},
                  {value:"details", label:"details"},
                  {value:"faq", label:"faq"},
                  {value:"general", label:"general"},
                  {value:"other", label:"other"},
                  {value:"summary", label:"summary"}],
                true);
              noteCombo.render();
            });
        }
        // Add a submit event listener to the form and prevent it from posting back
        self.element.querySelectorAll('#add_vul_notes').forEach((button) => {
          button.addEventListener('click', () => {
            store.dispatch('addVulNotes', {"vulId": this.vulnerabilityId});
          });
        });
        
        // Find all the buttons in the list and when they are clicked, we dispatch a 
        // `clearItem` action which we pass the current item's index to
        self.element.querySelectorAll('#remove_vul_notes').forEach((button, index) => {
            button.addEventListener('click', () => {
                store.dispatch('removeVulNotes', { "vulId": this.vulnerabilityId, "index": index });
            });
        });
        
        self.element.querySelectorAll("input[type=\"text\"]").forEach((element) => {
            element.addEventListener('change', () => {
                store.dispatch('setItem', { path: element.id, value: element.value});
            });
        });
        
        self.element.querySelectorAll("select.yace-notes").forEach((element) => {
            element.addEventListener('change', () => {
                store.dispatch('setItem', { path: element.id, value: element.value});
            });
        });

    }
};
